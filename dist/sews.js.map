{"version":3,"sources":["sews.js"],"names":[],"mappings":"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","file":"sews.js","sourcesContent":["// #### Sews.js - Simple Eventbus for Web Sockets\n// ##### v 0.0.1 - Documentation generated with the lovely [Docco](http://jashkenas.github.com/docco/)\n// \n// > Copyright (c) 2015 Iwan van der Kleijn\n// > All rights reserved.\n//\n// > This source code is licensed under the BSD-style license found in the LICENSE file in the root directory of this source tree.\n// \n// Be aware that Sews is written in ECMAScript 6 (2015). If to be executed in an ECMAScript 5 compatible run-time, you´ll need\n// [Babel](http://babeljs.io) to compile, or transpile, the source files (in src) to their transformed target files (in dist).\n// For an excellent overview of ES6 see: [https://babeljs.io/docs/learn-es6/](https://babeljs.io/docs/learn-es6/)\n\n// ##### Begin Sews.js source\n\n// Import Web Socket library\nimport * as ws from 'ws';\nimport WebSocket from 'ws';\n\nimport {EventEmitter} from 'events';\n\n// The Eventbus consist of a server and a client. The class WsBus implements the server which is the central node forming the \n// actual \"Bus\". From the client´s view, here is no difference between a \"server\" and a \"bus\" as *any* form of communication is \n// in the form of sending and receiving events to and from the \"bus\". For the moment, in the current implementation, underneath \n// this tidy abstraction, there remains the messy plumbing of a client-server architecture based on Web Sockets.\nclass WsBus extends EventEmitter {\n\n  // Options are a direct mapping to the options object of the 'ws' WebSocket library\n  constructor(options){\n    super();\n    this.server = new ws.Server(options);\n    // The 'connection' event on the web socket object is fired when there is an incoming\n    // connection.\n    this.server.on('connection', (socket) => {\n\n      // An open web socket is passed and encapsulated in a WsClient instance. This is used to comminicate between Server\n      // and this particular client\n      let wc = new WsClient(socket);\n      this.emit('bus.server.connection', wc);\n      // Fired when a message is received from the client\n      socket.on('message', (message) => {\n        console.log('on server: message received', message);\n        this.emit('bus.message', message);\n        \n        try{\n          // Parse message and validate that the envelope has a known and registered topic\n          // the _events property is a private member of an EventEmitter which maintains \n          // the keys of all registered event listeners or handlers.\n          let msg = JSON.parse(message);\n          // if unknown, fire the corresponding system event\n          if(!msg.topic || !this._events[msg.topic]){\n            console.log('on server: unknown message', msg);\n            this.emit('bus.unknown', msg);\n          } else {\n            console.log('on server: message passed on', msg);\n            // the handlers have signarure\n            // handler(topic: string, data: any, wc: WsClient): void \n            this.emit(msg.topic, msg.data, wc);\n          }\n        }catch(err){\n          console.log('on server: message error', err);\n          this.emit('bus.error', err);\n        }\n      });\n    });\n\n    //Delegate error\n    this.server.on('error', (error)=> {\n      console.log('error', error);\n      this.emit('bus.error',error);\n    });\n  }\n}\n\n\n// \nclass WsClient extends EventEmitter {\n\n  // The signature of WsClient´s contructor is:\n  // constructor(arg mixed, callback: function): void \n  // The constructor´s first argument contains either a WebSocker or an url (string). In case of the former, \n  // it is being encapsulated in the WsClient instance (for use server-sider). The latter form is for use on \n  // the client side. The parameter needs the url which to connect to. The callback is fired when the connection\n  // has been established.\n  constructor (arg, callback){\n    super();\n    let url;\n    // If already created - server side, it is not used client side - this one is used to encapsulate a WebSocket\n    if (arg instanceof WebSocket){\n      this.ws = arg;\n      return;\n    }else {\n      url = arg;\n    }\n    // Create new instance of socket client side\n    this.ws = new WebSocket(url);\n    // Fire callback if present when the 'open' event is fired\n    this.ws.on('open', () => {\n      if (callback){\n        callback();\n      }\n      // Instead of the callback, a handler can be registered on the 'bus.open' event as well.\n      this.emit('bus.open');\n    });\n\n    // For any incoming message, this event is fired. \n    this.ws.on('message', (message) => {\n      console.log('message received', message);\n      try{\n        // Parse message and validate that the envelope has a known and registered topic\n        // the _events property is a private member of an EventEmitter which maintains \n        // the keys of all registered event listeners or handlers.\n        let msg = JSON.parse(message);\n        if(!msg.topic || !this._events[msg.topic]){\n          this.emit('bus.unknown', msg);\n          console.log('message unknown', msg);\n        } else {\n          console.log('message passed on', msg);\n          this.emit(msg.topic, msg.data, this);\n        }\n      }catch(err){\n        console.log('message error:', error);\n        this.emit('bus.error', err);\n      }\n    });\n    this.ws.on('error', (error) => {\n      this.emit('bus.error', error);\n    });\n  }\n\n  send(topic, data){\n    // Pack the data and topic in a basic Sews envelope and send it as JSON to \n    // the server or client on the other side of the connection.\n    this.ws.send(JSON.stringify({topic, data}));\n  }\n}\n\nexport default {\n\n  // Create new instance of am Eventbus (\"server\" component)\n  startbus(options){\n    return new WsBus(options);\n  },\n\n  // Connect to an Eventbus\n  connect(url, callback){\n    return new WsClient(url, callback);\n  }\n};\n"],"sourceRoot":"/source/"}