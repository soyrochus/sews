{"version":3,"sources":["test.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAwBiB,SAAS;;;;sBACF,QAAQ;;IAApB,MAAM;;AAElB,QAAQ,CAAC,UAAU,EAAE,YAAI;AACvB,IAAE,CAAC,4DAA4D,EAAE,UAAC,IAAI,EAAI;;AAExE,sBAAK,OAAO,CAAC,qBAAqB,EAAC,YAAI;AACrC,UAAI,KAAK,GAAI,kCAAkC,CAAC;AAChD,UAAI,MAAM,GAAG,kBAAK,OAAO,CAAC,qBAAqB,EAAE,YAAI;;AAEnD,cAAM,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,gBAAgB,EAAE,KAAK,EAAC,KAAK,EAAC,EAAE,EAAC,IAAI,EAAE,KAAK,EAAC,CAAC,CAAC;OACpE,CAAC,CAAC;;AAEH,YAAM,CAAC,EAAE,CAAC,qBAAqB,EAAE,UAAC,IAAI,EAAE,GAAG,EAAE,OAAO,EAAG;;AAErD,YAAI;AACF,gBAAM,CAAC,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;AACnC,gBAAM,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;AAC/B,cAAI,EAAE,CAAC;SACR,CAAC,OAAM,KAAK,EAAC;AACZ,cAAI,CAAC,KAAK,CAAC,CAAC;SACb;OACF,CAAC,CAAC;KACJ,CAAC,CAAC;GACJ,CAAC,CAAC;CACJ,CAAC,CAAC","file":"test.js","sourcesContent":["/*\nvar assert = require(\"assert\")\ndescribe('Array', function(){\n  describe('#indexOf()', function(){\n    it('should return -1 when the value is not present', function(){\n      assert.equal(-1, [1,2,3].indexOf(5));\n      assert.equal(-1, [1,2,3].indexOf(0));\n    })\n  })\n})\n\n\nimport * as assert from 'assert';\n\ndescribe('Array', ()=> {\n  describe('#indexOf()', ()=>{\n    it('should return -1 when the value is not present', ()=>{\n      assert.equal(-1, [1,2,3].indexOf(5));\n      assert.equal(-1, [1,2,3].indexOf(0));\n    });\n  });\n});\n*/\n\nimport sews from '../sews';\nimport * as assert from 'assert';\n\ndescribe('The user', ()=>{\n  it('should be able to authenticate with a locally stored token', (done) =>{\n\n    sews.connect('ws://localhost:8080',()=>{\n      var token  = 'C40435342D154E2DAFE18973B68C6A30';\n      let client = sews.connect('ws://localhost:8080', ()=>{\n        \n        client.send({topic: 'mock.data.read', token:'ABC'}, {data: 'DEF'});\n      });\n      \n      client.on('mock.data.retrieved', (data, con, headers)=>{\n        \n        try {\n          assert.equal('ABC', headers.token);\n          assert.equal(\"DEF\", data.data);\n          done();\n        } catch(error){\n          done(error);\n        }         \n      });\n    });\n  });\n});"],"sourceRoot":"/source/"}