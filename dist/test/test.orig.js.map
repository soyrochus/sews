{"version":3,"sources":["test.orig.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAoCiB,SAAS;;;;sBACF,QAAQ;;IAApB,MAAM;;AAElB,kBAAK,OAAO,CAAC,qBAAqB,EAAC,YAAI;AACrC,MAAI,KAAK,GAAI,kCAAkC,CAAC;AAChD,MAAI,MAAM,GAAG,kBAAK,OAAO,CAAC,qBAAqB,EAAE,YAAI;;AAGnD,YAAQ,CAAC,6CAA6C,EAAE,YAAI;;AAE1D,QAAE,CAAC,4BAA4B,EAAE,UAAC,IAAI,EAAI;;AAExC,cAAM,CAAC,EAAE,CAAC,qBAAqB,EAAE,UAAC,IAAI,EAAE,GAAG,EAAE,OAAO,EAAG;;AAErD,cAAI;AACF,kBAAM,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;AAC7B,kBAAM,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACpC,gBAAI,EAAE,CAAC;WACR,CAAC,OAAM,KAAK,EAAC;AACZ,gBAAI,CAAC,KAAK,CAAC,CAAC;WACb;SACF,CAAC,CAAC;;AAEH,cAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;OAC/B,CAAC,CAAC;;AAEH,QAAE,CAAC,uCAAuC,EAAE,UAAC,IAAI,EAAI;;AAEnD,cAAM,CAAC,EAAE,CAAC,sBAAsB,EAAE,UAAC,IAAI,EAAE,GAAG,EAAE,OAAO,EAAG;;AAEtD,cAAI;AACF,kBAAM,CAAC,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;AACnC,kBAAM,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;AAC/B,gBAAI,EAAE,CAAC;WACR,CAAC,OAAM,KAAK,EAAC;AACZ,gBAAI,CAAC,KAAK,CAAC,CAAC;WACb;SACF,CAAC,CAAC;;AAEH,cAAM,CAAC,IAAI,CAAC,EAAC,KAAK,EAAC,iBAAiB,EAAE,KAAK,EAAC,KAAK,EAAC,EAAE,EAAC,IAAI,EAAC,KAAK,EAAC,CAAC,CAAC;OACnE,CAAC,CAAC;KACJ,CAAC,CAAC;GACJ,CAAC,CAAC;CACJ,CAAC,CAAC","file":"test.orig.js","sourcesContent":["/*\nvar assert = require(\"assert\")\ndescribe('Array', function(){\n  describe('#indexOf()', function(){\n    it('should return -1 when the value is not present', function(){\n      assert.equal(-1, [1,2,3].indexOf(5));\n      assert.equal(-1, [1,2,3].indexOf(0));\n    })\n  })\n})\n\n\nimport * as assert from 'assert';\n\ndescribe('Array', ()=> {\n  describe('#indexOf()', ()=>{\n    it('should return -1 when the value is not present', ()=>{\n      assert.equal(-1, [1,2,3].indexOf(5));\n      assert.equal(-1, [1,2,3].indexOf(0));\n    });\n  });\n});\n\nbus.on('mock.data.read', (data, con)=> {\n\n  console.log(\"server - mock.data.read\");\n  con.send('mock.data.retrieved',[\n    {id:1, name: \"Daina\"},\n    {id:2, name: \"Tecla\"},\n    {id:3, name: \"Marcus\"},\n    {id:4, name: \"Zeke\"}\n  ]);\n});\n\n*/\n\nimport sews from '../sews';\nimport * as assert from 'assert';\n\nsews.connect('ws://localhost:8080',()=>{\n  var token  = 'C40435342D154E2DAFE18973B68C6A30';\n  let client = sews.connect('ws://localhost:8080', ()=>{\n    \n\n    describe('Data send from the server should be correct', ()=>{\n      \n      it('including arrays & objects', (done) =>{\n        \n        client.on('mock.data.retrieved', (data, con, headers)=>{\n          \n          try {\n            assert.equal(4, data.length);\n            assert.equal(\"Daina\", data[0].name);\n            done();\n          } catch(error){\n            done(error);\n          }         \n        });\n\n        client.send('mock.data.read');\n      });\n      \n      it('headers & data send in two directions', (done) =>{\n        \n        client.on('mock.data.retrieved2', (data, con, headers)=>{\n          \n          try {\n            assert.equal('ABC', headers.token);\n            assert.equal(\"DEF\", data.data);\n            done();\n          } catch(error){\n            done(error);\n          }         \n        });\n\n        client.send({topic:'mock.data.read2', token:'ABC'}, {data:'DEF'});\n      });\n    });\n  });\n});\n"],"sourceRoot":"/source/"}